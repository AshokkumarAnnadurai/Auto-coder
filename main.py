import os
import yaml
import subprocess
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()

genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

model = genai.GenerativeModel(model_name="gemini-1.5-flash")

def read_prd(file_path):
    with open(file_path, 'r') as file:
        return yaml.safe_load(file)

def ask_gpt(prompt):
    response = model.generate_content(prompt)
    return response.text

def save_code(code, filename):
    os.makedirs("generated", exist_ok=True)
    with open(f"generated/{filename}", "w") as f:
        f.write(code)

def commit_and_pr(branch_name, message):
    subprocess.run(["git", "checkout", "-b", branch_name])
    subprocess.run(["git", "add", "."])
    subprocess.run(["git", "commit", "-m", message])
    subprocess.run(["git", "push", "--set-upstream", "origin", branch_name])
    subprocess.run(["gh", "pr", "create", "--title", message, "--body", "Auto-generated by AI"])

# --- MAIN EXECUTION ---
prd = read_prd("prds/login-flow.yaml")
prompt = f"Create a {prd['tech_stack']['frontend']} login page with the following: {prd['description']}"
code = ask_gpt(prompt)

save_code(code, "LoginPage.jsx")
commit_and_pr("feat/login-page", "feat: login page generated by AI")


# ===================================

# import os
# import yaml
# import subprocess
# import google.generativeai as genai
# from dotenv import load_dotenv
# load_dotenv()

# genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# model = genai.GenerativeModel("gemini-pro")

# def read_prd(file_path):
#     with open(file_path, 'r') as file:
#         return yaml.safe_load(file)

# def ask_gpt(prompt):
#     response = model.generate_content(prompt)
#     return response.text

# def save_code(code, filename):
#     os.makedirs("generated", exist_ok=True)
#     with open(f"generated/{filename}", "w") as f:
#         f.write(code)

# def commit_and_pr(branch_name, message):
#     subprocess.run(["git", "checkout", "-b", branch_name])
#     subprocess.run(["git", "add", "."])
#     subprocess.run(["git", "commit", "-m", message])
#     subprocess.run(["git", "push", "--set-upstream", "origin", branch_name])
#     subprocess.run(["gh", "pr", "create", "--title", message, "--body", "Auto-generated by AI"])

# # --- MAIN EXECUTION ---
# prd = read_prd("prds/login-flow.yaml")
# prompt = f"Create a {prd['tech_stack']['frontend']} login page with the following: {prd['description']}"
# code = ask_gpt(prompt)

# save_code(code, "LoginPage.jsx")
# commit_and_pr("feat/login-page", "feat: login page generated by AI")


# import os
# import yaml
# import subprocess
# from openai import OpenAI
# from dotenv import load_dotenv
# load_dotenv()

# client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# def read_prd(file_path):
#     with open(file_path, 'r') as file:
#         return yaml.safe_load(file)

# def ask_gpt(prompt):
#     response = client.chat.completions.create(
#         model="gpt-3.5-turbo",
#         messages=[
#             {"role": "system", "content": "You are an expert React developer."},
#             {"role": "user", "content": prompt}
#         ]
#     )
#     return response.choices[0].message.content

# def save_code(code, filename):
#     os.makedirs("generated", exist_ok=True)
#     with open(f"generated/{filename}", "w") as f:
#         f.write(code)

# def commit_and_pr(branch_name, message):
#     subprocess.run(["git", "checkout", "-b", branch_name])
#     subprocess.run(["git", "add", "."])
#     subprocess.run(["git", "commit", "-m", message])
#     subprocess.run(["git", "push", "--set-upstream", "origin", branch_name])
#     subprocess.run(["gh", "pr", "create", "--title", message, "--body", "Auto-generated by AI"])

# # --- MAIN EXECUTION ---
# prd = read_prd("prds/login-flow.yaml")
# prompt = f"Create a {prd['tech_stack']['frontend']} login page with the following: {prd['description']}"
# code = ask_gpt(prompt)

# save_code(code, "LoginPage.jsx")
# commit_and_pr("feat/login-page", "feat: login page generated by AI")
